print ('БЛОК №2. "GIT. БАЗОВЫЕ СТРУКТУРЫ ДАННЫХ"')

print ('Урок 1. "Динамическая типизация"')

# В Pyton как таковых переменных нет.
# В Python тип данных хранится не в переменной, а в самом объекте, на который она ссылается.
# Стоит упомянуть, что в Python объектом является все.
# Как мы помним, переменная является частью памяти, в которую мы помещаем объект, чтобы использовать позже.
# В Python работать напрямую с адресами памяти не представляется возможным.
# Однако, есть одно исключение – функция id, которая в определенных реализациях может показать нам адрес памяти объекта.
# Тем не менее ее основная и, пожалуй, единственная цель, это проверить ссылаются ли два имени на один и тот же объект,
# т. к. обратиться по этому адресу средствами Python невозможно.

# Сама переменная в Pyton ссылается на объект.

# Программа читает код справа налево, сверху вниз!
name = "Urban"          # Урбан это Объект строка = ему присваивается имя переменной (ИДЕНТИФИКАТОР).
print(name, type(name))
name = 5
print(name, type(name))
name = 5.5
print(name, type(name))
name = [1, 2, 3]        # тип <class 'list'> - list - список.
print(name, type(name))

# Следим, чтобы в операциях были одни типы данных:
age = 30
new_age = '30'
# print(age + new_age) = error

print ('Урок 2. "ПЕРЕМЕННЫЕ"')

# Переменные предназначены для хранения данных. Объясняя простыми словами,
# переменная – это кусочек памяти компьютера, в который мы можем что-то поместить,
# чтобы использовать позже.
# Название переменной может содержать буквенные и цифровые символы, а также подчеркивания,
# но начинаться оно обязательно должно именно с буквы или подчеркивания.
# Кроме того, нельзя, чтобы название переменной совпадало с названиями ключевых команд в Python.
# К примеру, мы знаем команду print, и не можем назвать переменную «print» и т. д.
# Переменным принято давать осмысленные названия. Такие, которые передавали бы суть того, что в них хранится.
# К примеру:

name = 'Aleksey'
print('Hi, my name is', name)
City_of_birth = "Irkutsk"     # Snake case
Country_of_birth = 'Russia'
print('I was born in', City_of_birth, Country_of_birth)
date_of_birth = "19th September"
month_of_birth = "September"
yers_of_birth = "1986"
print("My birthday is", date_of_birth, yers_of_birth)
age = 38
print('My age is', age, "years old")
status = 'UU Student'
print("I'm a", status)

# Первым рассмотрим стиль Snake case. В нем для разделения слов используются нижние подчеркивания.
# Однако в случаях названия, например классов, с которыми мы ознакомимся позднее, может использоваться
# и такой стиль, как Camel case. При таком стиле слова разделяются верхним регистром, то есть каждое
# новое слово пишется с заглавной буквы:
DateOfBirth = "25th December"
print(DateOfBirth)      # Camel case

print ('Урок 3. "СТРОКИ и ИНДЕКСАЦИЯ СТРОК"')

# Строки очень удобный тип данных. Вся информация, поступающая на вход от пользователя, или информация с полей
# для ввода, например на сайтах, будет являться строкой.
# Строка – это последовательность символов кодировки Unicode. Строки всегда заключаются в кавычки.
# В Python мы можем использовать, как одинарные, так и двойные кавычки.
# Помимо их создания, мы конечно же можем совершать со строками определенные действия.
# Одна из поддерживаемых строками операций – это конкатенация, или же сложение:
name = 'Victoria'
print('Hello, ' + name, '!')

# Одна из поддерживаемых строками операций – умножение:
name = 'Victoria'
print('Hello, '*3 + name, '!')

# Строки хороши тем, что представляют собой набор символов, и мы можем пройтись по каждому из них. Здесь нам и приходит
# на помощь индексация. Индексация подразумевает наличие порядкового номера у каждого элемента строки.
# Мы можем использовать ее для вывода частей или отдельного символа строки. Счет в строке начинается с нуля,
# соответственно первый символ строки будет иметь индекс [0]:

name = 'Victoria'
print(name [0], name [1], name [-5], name [-1], '...', name [0:8])
print(name [0:6]) # это срез строки, последний элемент не включён. Можно еще так:
print(name [:7], name [3:])
print(name [0:6:2]) # это срез строки, c шагом 2 (пропускаем каждый 2ой символ)
print(name [::-1]) # это срез строки, но в обратном порядке

print ('УРОК 4. "ОРГАНИЗАЦИЯ ПРОГРАММ и МЕТОДЫ СТРОК')

#name = input('Введите Ваше имя: ') # ввод с клавиатуры. print(type(name)) - результат любого ввода это символ (стр)
#current_year = 2024
#date_of_birth = input('В каком году Вы родились? ')
#age = current_year - int(date_of_birth)
#print('Здравствуйте, ', name, '!')
#print('В этом году,', name,', Вам', age,'лет/года!')

print('привет, я строка нижнего регистра')
print('привет, я строка нижнего регистра'.upper()) # команда перевода в верхний регистр
print('ПРИВЕТ, я строка ВЕРХНЕГО регистра'.lower()) # команда перевода в нижний регистр
print('ПРИВЕТ, я строка ВЕРХНЕГО регистра'.replace('ПРИВЕТ', 'пока')) # команда замены символов
print('ПРИВЕТ, я строка ВЕРХНЕГО регистра'.replace(' ', '_')) # команда замены символов

print ('УРОК 5. "СПИСКИ. ИНДЕКСАЦИЯ и МЕТОДЫ СПИСКОВ')

food = ['apple', 'orange', 'banana']
print (food)
print (food [0])
food [1] = 'peach' # списки могут быть тоже динамическими
print (food)
food.append(True) # чтобы расширить список, добавляет в конец списка
print (food)
food.extend('string') # чтобы расширить список, добавляет в конец списка символы
print (food)
food.extend(['string', 2]) # чтобы расширить список, добавляет в конец списка целое
print (food)
food.remove('apple') # чтобы убрать из списка
print (food)
print('banana' in food) # проверить наличие в списке
print('orange' not in food) # проверить наличие в списке
print (food [0:2:2])


